'''

Merge Sorted Array


You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums 1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums 1. To accommodate this, nums1 has a length of mn, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Example 1:

Input: nums1 [1,2,3,0,0.01, m = 3. nums 2 [2.5.6] n = 3

Output: [1.2.2.3.5.0]

Explanation: The arrays we are merging are [1.2.3] and [2.5.6]. The result of the merge is 11.2.2.3.5,6] with the underlined elements coming from numsl.

Example 2:

Input: numsl = [1]. m = 1, nums2 n = 0

Output: [1]

Explanation: The arrays we are merging are [1] and []. The result of the merge is [11.

Example 3:

Input: numsl = [0]. m = 0, nums2 [1], n = 1

Output: [1]

Explanation: The arrays we are merging are [] and [1]. The result of the merge is [1].

Note that because m= 0, there are no elements in numsl. The 0 is only there to ensure the merge result can fit in nums1.




Code :


'''



class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        i = m - 1
        j = n - 1
        k = m + n - 1
        
        while j >= 0:
            if i >= 0 and nums1[i] > nums2[j]:
                nums1[k] = nums1[i]
                i -= 1
            else:
                nums1[k] = nums2[j]
                j -= 1
            k -= 1

    
        