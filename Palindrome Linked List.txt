'''

Palindrome Linked List

Given the head of a singly linked list, return true if it is a palindrome or false otherwise.

 

Example 1:


Input: head = [1,2,2,1]
Output: true
Example 2:


Input: head = [1,2]
Output: false
 

Constraints:

The number of nodes in the list is in the range [1, 105].
0 <= Node.val <= 9


Code:

'''

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        st = []
        slow , fast = head,head
        fast = fast.next
        while fast != slow and slow != None:
            if fast == None :
                fast = head
            elif fast.next == None:
                fast = head.next
            fast = fast.next.next
            if fast != slow:
                st.append(slow.val)
            slow = slow.next
        while len(st) != 0 and fast != None:
            if fast.val == st[-1]:
                st.pop()
            else:
                break    
            fast = fast.next
        if len(st) == 0:
            return True
        else:
            return False