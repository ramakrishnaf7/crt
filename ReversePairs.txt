'''

Reverse Pairs

Given an integer array nums, return the number of reverse pairs in the array.

A reverse pair is a pair (i, j) where:

0 <= i < j < nums.length and
nums[i] > 2 * nums[j].
 

Example 1:

Input: nums = [1,3,2,3,1]
Output: 2
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 3, nums[4] = 1, 3 > 2 * 1
Example 2:

Input: nums = [2,4,3,5,1]
Output: 3
Explanation: The reverse pairs are:
(1, 4) --> nums[1] = 4, nums[4] = 1, 4 > 2 * 1
(2, 4) --> nums[2] = 3, nums[4] = 1, 3 > 2 * 1
(3, 4) --> nums[3] = 5, nums[4] = 1, 5 > 2 * 1
 

Constraints:

1 <= nums.length <= 5 * 104
-231 <= nums[i] <= 231 - 1




Code:


'''

class Solution:
    def reversePairs(self,nums: List[int]) -> int:
        def ms(arr,left,right):
            c = 0
            if left >= right:
                return c
            mid = (left + right)//2
            c += ms(arr,left,mid)
            c += ms(arr,mid+1,right)
            c += CountPairs(arr,left,mid,right)
            merge(arr,left,mid,right)
            return c

        def merge(arr,left,mid,right):
            t = []
            i = left
            j = mid + 1
            while i <= mid and j <= right:
                if arr[i] <= arr[j] :
                    t.append(arr[i])
                    i += 1
                else:
                    t.append(arr[j])
                    j += 1
            while i<= mid:
                t.append(arr[i])
                i += 1
            while j <= right:
                t.append(arr[j])
                j += 1
            for i in range(left,right+1):
                arr[i] = t[i - left]
        def CountPairs(arr,left,mid,right):
            r = mid + 1
            c = 0
            for k in range(left,mid + 1):
                while r <= right and arr[k] > 2 * arr[r] :
                    r += 1
                c += (r - (mid + 1))
            return c
        return ms(nums,0,len(nums) - 1)
        