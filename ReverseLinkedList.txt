'''

Reverse Linked List

Given the head of a singly linked list, reverse the list, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is the range [0, 5000].
-5000 <= Node.val <= 5000




Code:



'''



# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        #ByRecursion
        # if head == None or head.next == None:
        #     return head
        # newhead = self.reverseList(head.next)
        # front = head.next
        # front.next = head
        # head.next = None
        # return newhead
        
        #ByIteration
        if head == None or head.next == None:
             return head
        prev = None
        temp = head
        while temp != None:
            front = temp.next
            temp.next = prev
            prev = temp
            temp = front
        return prev