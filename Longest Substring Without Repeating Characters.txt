'''

Longest Substring Without Repeating Characters

Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.


Code:

'''

class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        c = 0
        d = {}
        l,r = 0,0
        while l < len(s) and r < len(s):
            if s[r] not in d:
                d[s[r]] = r
            else:
                l = max(l,d[s[r]] + 1)
                d[s[r]] = r
            c = max(c,r - l + 1)
            r += 1
        return c
