Rotting Oranges


You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:


Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4
Example 2:

Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.
Example 3:

Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
grid[i][j] is 0, 1, or 2.

code:

'''

class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        queue = []
        totalCount = 0
        count = 0
        c = 0
        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == 2:
                    totalCount += 1
                    count += 1
                    queue.append((i,j,0))
                elif grid[i][j] == 1:
                    totalCount += 1
    
        while queue != []:
            item = queue.pop(0)
            c = item[2]
            # top
            if item[0] - 1 >= 0 and item[0] - 1 < len(grid) and item[1] >= 0 and item[1] < len(grid[item[0]]) and grid[item[0] - 1][item[1]] == 1:
                queue.append((item[0] - 1,item[1],c + 1))
                grid[item[0] - 1][item[1]] = 2
                count += 1
            # left
            if item[0] >= 0 and item[0] < len(grid) and item[1] - 1 >= 0 and item[1] - 1 < len(grid[item[0]]) and grid[item[0]][item[1] - 1] == 1:
                queue.append((item[0],item[1] - 1,c + 1))
                grid[item[0]][item[1] - 1] = 2
                count += 1
            # right
            if item[0] >= 0 and item[0] < len(grid) and item[1] + 1 >= 0 and item[1] + 1 < len(grid[item[0]]) and grid[item[0]][item[1] + 1] == 1:
                queue.append((item[0],item[1] + 1,c + 1))
                grid[item[0]][item[1] + 1] = 2
                count += 1
            #buttom
            if item[0] + 1 >= 0 and item[0] + 1 < len(grid) and item[1] >= 0 and item[1] < len(grid[item[0]]) and grid[item[0] + 1][item[1]] == 1:
                queue.append((item[0] + 1,item[1],c + 1))
                grid[item[0] + 1][item[1]] = 2
                count += 1
        
            
        if (count == totalCount):
            return c 
        else: 
            return -1
'''