'''

Rotate List

Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109


Code:

'''
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def rotateRight(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        t = head
        c = 1
        l = 1
        if t == None or t.next == None:
            return t
        if k == 0:
            return head
        while t.next != None:
            l += 1
            t = t.next
        oldhead = head
        t.next = head
        k = k % l
        while c != l - k:
            c += 1
            oldhead = oldhead.next
        newhead = oldhead.next
        oldhead.next = None
        return newhead